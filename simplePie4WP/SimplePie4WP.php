<?php 

/*
Plugin Name: Simple Pie for WordPress
Plugin URI: http://www.e-tissage.net
Description: http://simplepie.org adapted to be used with wordpress short codes
Version: 1.0
Author: Veronique Gendner
Author URI: http://www.e-tissage.net
*/

date_default_timezone_set('Europe/Paris');
ini_set('display_errors', 'On');
error_reporting(E_ALL ^ E_NOTICE);

function simplePie4WP ($atts = [], $content = null) {
	/* shortcode atts
	feedurl mandatory
	orderByDate optionnal defaut 'true'
	nofeedtitle optionnal defaut 'false' (by default feed title is displayed if available)
	*/
	
	//wp_register_style( string $handle, string $src, array $deps = array(), string|bool|null $ver = false, string $media = 'all' )
	
	$atts = array_change_key_case((array)$atts, CASE_LOWER); 

	// Start counting time for the page load
	$starttime = explode(' ', microtime());
	$starttime = $starttime[1] + $starttime[0];
	
	// Include SimplePie
	include_once('autoloader.php');
	include_once('idn/idna_convert.class.php');
	
	// Create a new instance of the SimplePie object
	$feed = new SimplePie();

	//$feed->force_fsockopen(true);
	
	/* @@
	if (isset($_GET['js']))	{
		SimplePie_Misc::output_javascript();
		die();
	} */
	
	if ($atts['feedurl'] !== '') {
		// Strip slashes if magic quotes is enabled (which automatically escapes certain characters)
		if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc())
		{
			$atts['feedurl'] = stripslashes($atts['feedurl']);
		}

		// Use the URL that was passed to the page in SimplePie
		$feed->set_feed_url($atts['feedurl']);
	}

	/* @@ Allow us to change the input encoding from the URL string if we want to. (optional)
	if (!empty($_GET['input'])) {
		$feed->set_input_encoding($_GET['input']);
	} */
	
	// Allow us to choose to not re-order the items by date. (optional)
	if (isset ($atts['orderbydate']) && $atts['orderbydate'] == 'false') {
		$feed->enable_order_by_date(false);
	}
	
	$feed->set_cache_location(ABSPATH .'wp-content/plugins/simplePie4WP/library/SimplePie/Cache');
	$feed->enable_cache(false);
	$feed->set_cache_duration(60);
	$feed->set_item_limit(50);

	/* @@ Trigger force-feed
	if (!empty($_GET['force']) && $_GET['force'] == 'true')	{
		$feed->force_feed(true);
	} */
	
	// Initialize the whole SimplePie object.  Read the feed, process it, parse it, cache it, and
	// all that other good stuff.  The feed's information will not be available to SimplePie before
	// this is called.
	$success = $feed->init();

	// We'll make sure that the right content type and character encoding gets set automatically.
	// This function will grab the proper character encoding, as well as set the content type to text/html.
	$feed->handle_content_type();
	// When we end our PHP block, we want to make sure our DOCTYPE is on the top line to make
	// sure that the browser snaps into Standards Mode.

	// Check to see if there are more than zero errors (i.e. if there are any errors at all)
	if ($feed->error() || $feed->data['error'] )	{
		// If so, start a <div> element with a classname so we can style it.
		$result =  '<div class="sp_errors">' . "\r\n";
		// ... and display it.
		$result .= '<p>' . htmlspecialchars($feed->error()) . "</p>\r\n";
		$result .= '<p>' . $feed['data']['error'] . "</p>\r\n";
		// Close the <div> element we opened.
		$result .=  '</div>' . "\r\n";
	}
	
	// <!-- As long as the feed has data to work with... -->
	if ($success) { 
		$result = '<div id="sp_results">';
		
			//<!-- If the feed has a link back to the site that publishes it (which 99% of them do), link the feed's title to it. -->
			if (isset($atts['nofeedtitle']) && $atts['nofeedtitle'] != "true" ) { // and shortcode without nofeedtitle='true'
			
				$result .= '<h3>';
			
				$link = $feed->get_link();
				$title = $feed->get_title();
				if ($link){ 
					$title = "<a href=".$link." title=".$title.'>'.$title."</a>"; 
				}
				$result .= $title;
				
				$result .= '</h3>';
				
				//<!-- If the feed has a description, display it. -->
				$result .= $feed->get_description();
			}

			// <!-- Let's begin looping through each individual news item in the feed. -->
			foreach($feed->get_items() as $item) {

				$result .= '<div class="RSSitem">';

				//<!-- If the item has a permalink back to the original post (which 99% of them do), link the item's title to it. -->
				if (preg_match("/twitter/",$item->get_permalink()) === 0) { // do not display title for item generated by twitter (redundant with item content)
					$result .= '<h4>';
					if ($item->get_permalink()) $result .=  '<a href="' . $item->get_permalink() . '">' ;
					$result .= $item->get_title();
					if ($item->get_permalink()) $result .=  '</a>'; 
					// if ($item->get_source()) { marche pas
					$source=$item->data['child']['']['source'][0]['data'];
					$result .= " <span class='source'>".$source."</span>";
					$result .= '</h4>';	
				}
				
				//<!-- item's date -->
				$result .= '<span class="date">'. $item->get_date('j M Y, g:i a').'</span>';
				
				//<!-- Display the item's primary content. -->
				$result .=  $item->get_content(); 

				// Check for enclosures.  If an item has any, set the first one to the $enclosure variable.
				if ($enclosure = $item->get_enclosure(0)) {
					// Use the embed() method to embed the enclosure into the page inline.
					$result .=  '<div align="center">';
					$result .=  '<p>' . $enclosure->embed(array(
						'audio' => './for_the_demo/place_audio.png',
						'video' => './for_the_demo/place_video.png',
						'mediaplayer' => './for_the_demo/mediaplayer.swf',
						'altclass' => 'download'
					)) . '</p>';
					if ($enclosure->get_link() && $enclosure->get_type()) {
						$result .=  '<p class="footnote" align="center">(' . $enclosure->get_type();
						if ($enclosure->get_size()) {
							$result .=  '; ' . $enclosure->get_size() . ' MB';
						}
						$result .=  ')</p>';
					}
					if ($enclosure->get_thumbnail()) {
						$result .=  '<div><img src="' . $enclosure->get_thumbnail() . '" alt="" /></div>';
					}
					$result .=  '</div>';
				}

				$result .= '</div>';

			}  //<!-- Stop looping through each item once we've gone through all of them. -->

		$result .= '</div>' ;

	} //<!-- From here on, we're no longer using data from the feed. -->
	
	return $result ;	
}

add_shortcode('RSSfeed','simplePie4WP');

//add_filter( 'wp_feed_cache_transient_lifetime', create_function( '$a', 'return 60;' ) );
